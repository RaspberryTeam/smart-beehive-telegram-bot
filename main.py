import os
import json
from flask import Flask, request
from telebot import TeleBot, types

# –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
TOKEN = os.getenv("BOT_TOKEN")
WEBHOOK_URL = f"https://smart-beehive-telegram-bot.onrender.com/{TOKEN}"

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–æ—Ç–∞
bot = TeleBot(TOKEN)

app = Flask(__name__)


@app.route(f"/{TOKEN}", methods=["POST"])
def webhook():
    print(f"–û—Ç—Ä–∏–º–∞–Ω–æ –∑–∞–ø–∏—Ç –¥–æ –≤–µ–±—Ö—É–∫–∞, {TOKEN, WEBHOOK_URL}") #–î–æ–¥–∞–Ω–æ –ª–æ–≥
    try:
        json_str = request.get_data().decode("UTF-8")
        update = types.Update.de_json(json_str)
        print(f"–û—Ç—Ä–∏–º–∞–Ω–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è: {update}") #–î–æ–¥–∞–Ω–æ –ª–æ–≥
        bot.process_new_updates([update])
        return "OK", 200
    except Exception as e:
        print(f"–ü–æ–º–∏–ª–∫–∞ –≤ –≤–µ–±—Ö—É–∫—É: {e}") #–î–æ–¥–∞–Ω–æ –ª–æ–≥
        return 'Internal Server Error', 500

@bot.message_handler(commands=['start'])
def send_welcome(message):
    print(f" –û—Ç—Ä–∏–º–∞–Ω–æ –∫–æ–º–∞–Ω–¥—É /start –≤—ñ–¥ {message.chat.id}")
    chat_id = message.chat.id
    markup = types.InlineKeyboardMarkup()

    bot.send_message(chat_id, "–õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ!")

    if get_token(chat_id) is None:
        markup.add(types.InlineKeyboardButton('–í—Ö—ñ–¥', callback_data='login'))
        markup.add(types.InlineKeyboardButton('–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è', callback_data='registration'))
    else:
        if check_beehive_exists(chat_id):  # –ü–µ—Ä–µ–¥–∞—î–º–æ chat_id
            markup.add(types.InlineKeyboardButton('–ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –ø–∞—Å—ñ–∫—É', callback_data='view_apiary'))
            markup.add(types.InlineKeyboardButton('–°—Ç–≤–æ—Ä–∏—Ç–∏ –ø–∞—Å—ñ–∫—É', callback_data='create_apiary'))
        else:
            markup.add(types.InlineKeyboardButton('–°—Ç–≤–æ—Ä–∏—Ç–∏ –ø–∞—Å—ñ–∫—É', callback_data='create_apiary'))

    bot.send_message(chat_id, "–í–∏–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é:", reply_markup=markup)
    print(f"–§—É–Ω–∫—Ü—ñ—è send_welcome –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –¥–ª—è chat_id: {chat_id}") # –î–æ–¥–∞–Ω–æ –ª–æ–≥

# @bot.message_handler(commands=['start'])
# def send_welcome(message):
#     print(f"üöÄ –û—Ç—Ä–∏–º–∞–Ω–æ –∫–æ–º–∞–Ω–¥—É /start –≤—ñ–¥ {message.chat.id}")
#     chat_id = message.chat.id
#     markup = types.InlineKeyboardMarkup()

#     bot.send_message(chat_id, "–õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ!")

#     if get_token(chat_id) is None:
#         markup.add(types.InlineKeyboardButton('–í—Ö—ñ–¥', callback_data='login'))
#         markup.add(types.InlineKeyboardButton('–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è', callback_data='registration'))
#     else:
#         if check_beehive_exists(chat_id):  # –ü–µ—Ä–µ–¥–∞—î–º–æ chat_id
#             markup.add(types.InlineKeyboardButton('–ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –ø–∞—Å—ñ–∫—É', callback_data='view_apiary'))
#             markup.add(types.InlineKeyboardButton('–°—Ç–≤–æ—Ä–∏—Ç–∏ –ø–∞—Å—ñ–∫—É', callback_data='create_apiary'))
#         else:
#             markup.add(types.InlineKeyboardButton('–°—Ç–≤–æ—Ä–∏—Ç–∏ –ø–∞—Å—ñ–∫—É', callback_data='create_apiary'))

#     bot.send_message(chat_id, "–í–∏–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é:", reply_markup=markup)

if __name__ == "__main__":
    print("–ó–∞–ø—É—Å–∫ Flask-—Å–µ—Ä–≤–µ—Ä–∞...")
    # bot.remove_webhook()
    bot.set_webhook(url=f"{WEBHOOK_URL}")
    port = int(os.environ.get("PORT", 10000))
    app.run(host="0.0.0.0", port=port)

# import os
# import json
# from flask import Flask, request
# from telebot import TeleBot, types

# # –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
# TOKEN = os.getenv("BOT_TOKEN")
# WEBHOOK_URL = os.getenv("WEBHOOK_URL")
# WEBHOOK_PATH = f"/webhook/{TOKEN}"

# # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–æ—Ç–∞
# bot = TeleBot(TOKEN)

# app = Flask(__name__)

# @app.route('/webhook', methods=['POST'])
# def webhook():
#     print(f"üîë BOT_TOKEN: {TOKEN}, webhook {WEBHOOK_URL}")  # –õ–æ–≥ –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏

#     print("üî• –ó–∞–ø–∏—Ç –Ω–∞ /webhook –æ—Ç—Ä–∏–º–∞–Ω–æ")
#     try:
#         json_str = request.get_data().decode('UTF-8')
#         print(f"üì© –û—Ç—Ä–∏–º–∞–Ω–æ –∑–∞–ø–∏—Ç: {json_str}")

#         update = types.Update.de_json(json_str)
#         print(f"üîÑ –î–µ–∫–æ–¥–æ–≤–∞–Ω–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è: {update}")  # –õ–æ–≥ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è

#         print("‚úÖ –û–±—Ä–æ–±–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è...")  # –õ–æ–≥ –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ–¥–∞—á–µ—é –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –≤ –±–æ—Ç
#         bot.process_new_updates([update])
#         print(f"‚úÖ –û–Ω–æ–≤–ª–µ–Ω–Ω—è –ø–µ—Ä–µ–¥–∞–Ω–æ –±–æ—Ç—É")
#         bot.send_chat_action(chat_id, "–ü—Ä–∏–≤—ñ—Ç! –¶–µ —Ç–µ—Å—Ç–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è.")
        

#         return 'OK', 200
#     except Exception as e:
#         print(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")
#         return 'Internal Server Error', 500



# @bot.callback_query_handler(func=lambda call: call.data in ['login', 'registration', 'create_apiary', 'view_apiary', 'back_in_menu'])
# def callback_handler(call):
#     chat_id = call.message.chat.id
#     message_id = call.message.message_id

#     bot.delete_message(chat_id, message_id)

#     if call.data == 'login':
#         process_login(call.message)
#     elif call.data == 'registration':
#         process_registration(call.message)
#     elif call.data == 'create_apiary':
#         create_apiary(call.message)
#     elif call.data == 'view_apiary':
#         view_apiary(call.message)
#     elif call.data == 'back_in_menu':
#         send_welcome(call.message)


# if __name__ == "__main__":
#     print("‚úÖ –ó–∞–ø—É—Å–∫ Flask-—Å–µ—Ä–≤–µ—Ä–∞...")

#     # –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –≤–µ–±—Ö—É–∫–∞
#     bot.remove_webhook()
#     bot.set_webhook(url=f"{WEBHOOK_URL}")

#     port = int(os.environ.get("PORT", 10000))  # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –∑–º—ñ–Ω–Ω—É —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞ PORT
#     app.run(host="0.0.0.0", port=port)
